V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] Output code: 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from ctypes import c_void_p, c_long
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import torch
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import math
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import random
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import os
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import tempfile
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from math import inf, nan
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch import device, empty_strided
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.codecache import AsyncCompile
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] aten = torch.ops.aten
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] async_compile = AsyncCompile()
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] # kernel path: /tmp/torchinductor_root/ec/cecdpd3k4bolft7b2zsthstwq3xvr3fqqnrjjdly7rl25ippm6jl.py
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] # Source Nodes: [square], Original ATen: [aten.pow]
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] # square => pow_1
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] triton_poi_fused_pow_0 = async_compile.triton('triton_', '''
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton.language as tl
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor import triton_helpers, triton_heuristics
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.ir import ReductionHint, TileHint
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.triton_helpers import libdevice, math as tl_math
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.triton_heuristics import AutotuneHint
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.utils import instance_descriptor
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] @triton_heuristics.pointwise(
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     size_hints=[134217728], 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     filename=__file__,
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_pow_0', 'mutated_arg_names': [], 'no_x_dim': False, 'backend_hash': 'd389db67f581f05462832d65867d4147e9aefba5e2e1d883bbadd9e1860863a6'},
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     min_elem_per_thread=0
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] )
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] @triton.jit
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xnumel = 100000000
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     xmask = xindex < xnumel
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     x0 = xindex
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0), xmask)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tmp1 = tmp0 * tmp0
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp1, xmask)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] ''', device_str='cuda')
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] import triton.language as tl
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._inductor.triton_heuristics import grid, split_scan_grid, start_graph, end_graph
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] async_compile.wait(globals())
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] del async_compile
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] def call(args):
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     arg0_1, = args
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     args.clear()
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     assert_size_stride(arg0_1, (10000, 10000), (10000, 1))
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]         torch.cuda.set_device(0)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]         buf0 = empty_strided_cuda((10000, 10000), (10000, 1), torch.float32)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]         # Source Nodes: [square], Original ATen: [aten.pow]
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]         triton_poi_fused_pow_0.run(arg0_1, buf0, 100000000, grid=grid(100000000), stream=stream0)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]         del arg0_1
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     return (buf0, )
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     arg0_1 = rand_strided((10000, 10000), (10000, 1), device='cuda:0', dtype=torch.float32)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     fn = lambda: call([arg0_1])
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] if __name__ == "__main__":
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0905 18:35:25.771420 140602662414144 torch/_inductor/graph.py:1267] [0/0] [__output_code] 
I0905 18:35:25.772161 140602662414144 torch/_inductor/graph.py:1273] [0/0] [__output_code] Output code written to: /tmp/torchinductor_root/c5/cc5rotf65fjna34mygfx3ah4yx3sw4dcc2pbovqhkzxpig544hjn.py
